 -----
 Build
 -----
 alexxismachine
 -----
 2017-03-14
 -----
 
Build
 
  Diese Seite beschreibt den Build und das Ausbringen der Artefakte. 

* Build-Stages

  Für den Build gibt es drei Stages: "local", "internal" und "public".
  Die Stages dienen unterschiedlichen Zwecken. 
  Sie sind in der parent-pom weitgehend vorkonfiguriert.
 
** Entwickler-Build "local"

  Der Entwickler-Build ist für den einfachen Build durch Entwickler gedacht.
  Alle Artefakte können in temporäre Verzeichnisse gebaut und deployed werden.
  Dort können sie geprüft werden.
  Es finden nur SNAPSHOT- und keine Release-Builds statt.
  
  Der Entwickler-Build hat das lokale git als scm und ist das Ziel von commits.
  
*** Erstellen der Artefakte

  Typischerweise werden bei der Entwicklung mit einem <clean install> die Artefakte lokal installiert.
  Ein <deploy> obliegt der "public"-Stage.
  
*** Erstellen der Site

  Zum Testen der zusammenhängenden Site aller Projekte empfiehlt es sich,
  diese an eine gemeinsame Stelle zu "stagen".
  
  Hierfür muss über z.B. <-DstagingDirectory=/tmp/japrost/site/> die gemeinsame Ausgabe gewählt werden 
  und über <-DtopSiteURL=http://www.japrost.de/> das relativieren der Links einheitlich erstellt werden.
  
  Nicht zu vergessen, dass für die Site des Parent-Projekts über <-f site-pom.xml> die pom für die Site ausgewählt werden muss
  und ein erstellen der "zu vererbenden" Site nicht notwendig ist.
 
** TBC Interner-Build "internal"

  Der interne Build ist für das Vorbereiten der Veröffenlichung bestimmt. 
  Hier wird alles so weit geprüft, dass einer Veröffentlichung nichts im Wege steht. 
  In dieser Stage werden die eigentlichen Releases erstellt.
  Die Konfiguration der intenen Builds befindet sich überwiegend settings.
  
  Der Interne Build hat ein internes git als scm. 
  Hierher wird aus dem Entwickler-Build gepushed.
 
** Öffentlicher-SNAPSHOT-Build "public"

  Der öffentliche-SNAPSHOT-Build ist zum Veröffenlichen der SNAPSHOT-Artefakte und 
  der aktuellen Site bestimmt.
  
*** Veröffentlichen der SNAPSHOT-Artefakte

  Über ein <clean deploy> können die SNAPSHOT-Artefakte veröffentlicht werden,
  sofern der der Server <japrostSnapshotsId> in den settings konfiguriert ist.

*** Veröffentlichen der SNAPSHOT-Site

  Zum Veröffentlichen der SNAPSHOT-Site über ein <site-deploy> muss in den settings sowohl
  der Server <japrostSiteId> als auch die <japrost.distribution.site.url> korrekt konfiguriert sein.
  Für letzteres bietet es sich an ein immer aktives Profile <japrostSite> in den settings anzulegen.

** TBD

  Der öffentliche Build ist für das Ausbringen der Artefakte in die Öffenlichkeit bestimmt.
  Die Artefakte werden hochgeladen und die Site deployed.
  Diese Stage ist weitgehend in der parent-pom, mit den öffenlichen Koordinaten konfiguriert.
  
  Der public Build hat das öffenliche git als scm. 
  Dieses wird aus dem internen scm synchronisiert. 
  
* Build-Schritte

  Die Weiterentwicklung der Projekte findet in den im folgenden beschriebenen Schritten statt.
  
  Artefakte werden auf allen Stages über ein übliches <<<clean deploy>>> erstellt,
  mit dem Profil der jeweiligen Stage aktiviert.

  Die Site wird in den Stages unterschiedlich ausgebracht.
  Es muss zusätzlich zwischen "normalen" Projekten und dem parent-Projekt unterschieden werden,
  da das parent-Projekt eine separate Site hat. 
  Daher werden die Builds der parent-Site mit <<<-f site-pom.xml>>> gestartet.
  
** Lokale Entwicklung ("local")

  Entwickeln und lokales einchecken.
  Die Site wird lokal über <<<post-site site:stage>>> erstellt.

** SNAPSHOT-Veröffenlichung ("public")

  Pushen in das öffenliche SCM. Deployen der SNAPSHOT Artefakte und Site.
  Die Site wird über <<<site-deploy>>> erstellt.
  
** Release-Veröffentlichung  ("internal", dann "public")

  Bauen und veröffentlichen der Release-Artefakte und -Site (über internen build)
  
  * changes anpassen und integrieren
  
  * internal release build
  
  * release tag auschecken
  
  * public build (? ohne site?)
  
  * close and release auf OSS
  
  * warten auf öffenliche Verfügbarkeit
  
  * "next SNAPSHOT" auschecken (lokal updaten)
  
  * push nach public scm
  